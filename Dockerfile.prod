FROM python:alpine as builder

WORKDIR /usr/src/app

# Create the app user
# RUN addgroup -S app && adduser -S -G app app

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV BOTO_CONFIG=/dev/null

RUN apk update && apk add postgresql py3-pip postgresql-dev gcc python3-dev musl-dev

RUN pip install --upgrade pip
RUN pip install flake8==5.0.4
COPY . .
RUN flake8 --ignore=E501,F401 .

COPY requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

#########
# FINAL #
#########

# pull official base image
FROM python:alpine

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup -S app && adduser -S app -G app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy docker-entrypoint.sh
COPY ./docker-entrypoint.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/docker-entrypoint.sh
RUN chmod +x  $APP_HOME/docker-entrypoint.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# run docker-entrypoint.sh
ENTRYPOINT ["/home/app/web/docker-entrypoint.sh"]